syntax = "proto3";

package apis;
option go_package = ".;ocr_v1";

import "validate.proto";
import "common.proto";

message OCRFile {
    string file_id = 1;
    string language = 2;
    string text = 3;
    map<string, string> properties = 4;
}

//Request to determine text found in a file
message OcrRequest {
    string reference_id = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
    string language_id = 2 [(validate.rules).string = {min_len: 2, max_len: 3, pattern: "[a-z]{2,3}"}];
    map<string, string> properties = 3;
    bool async = 4;
    repeated string file_id = 5 [(validate.rules).repeated = {min_items: 1, max_items: 5, items: { string: {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}} } ];
}


message OcrResponse {
    string reference_id = 1;
    apis.STATE state = 2;
    repeated OCRFile result = 3;
}

message StatusRequest {
    string reference_id = 1 [(validate.rules).string = {min_len: 3, max_len: 40, pattern: "[0-9a-z_-]{3,20}"}];
}


service OCRService {

    // Perform a new ocr process request
    rpc Recognize (OcrRequest) returns (OcrResponse);

    // Check the status of request if queued
    rpc Status (StatusRequest) returns (OcrResponse);

}