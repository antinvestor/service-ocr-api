// Code generated by MockGen. DO NOT EDIT.
// Source: ocr_grpc.pb.go

// Package ocrv1 is a generated GoMock package.
package ocrv1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOCRServiceClient is a mock of OCRServiceClient interface.
type MockOCRServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCRServiceClientMockRecorder
}

// MockOCRServiceClientMockRecorder is the mock recorder for MockOCRServiceClient.
type MockOCRServiceClientMockRecorder struct {
	mock *MockOCRServiceClient
}

// NewMockOCRServiceClient creates a new mock instance.
func NewMockOCRServiceClient(ctrl *gomock.Controller) *MockOCRServiceClient {
	mock := &MockOCRServiceClient{ctrl: ctrl}
	mock.recorder = &MockOCRServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCRServiceClient) EXPECT() *MockOCRServiceClientMockRecorder {
	return m.recorder
}

// Recognize mocks base method.
func (m *MockOCRServiceClient) Recognize(ctx context.Context, in *OcrRequest, opts ...grpc.CallOption) (*OcrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Recognize", varargs...)
	ret0, _ := ret[0].(*OcrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recognize indicates an expected call of Recognize.
func (mr *MockOCRServiceClientMockRecorder) Recognize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recognize", reflect.TypeOf((*MockOCRServiceClient)(nil).Recognize), varargs...)
}

// Status mocks base method.
func (m *MockOCRServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*OcrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*OcrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockOCRServiceClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockOCRServiceClient)(nil).Status), varargs...)
}

// MockOCRServiceServer is a mock of OCRServiceServer interface.
type MockOCRServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOCRServiceServerMockRecorder
}

// MockOCRServiceServerMockRecorder is the mock recorder for MockOCRServiceServer.
type MockOCRServiceServerMockRecorder struct {
	mock *MockOCRServiceServer
}

// NewMockOCRServiceServer creates a new mock instance.
func NewMockOCRServiceServer(ctrl *gomock.Controller) *MockOCRServiceServer {
	mock := &MockOCRServiceServer{ctrl: ctrl}
	mock.recorder = &MockOCRServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCRServiceServer) EXPECT() *MockOCRServiceServerMockRecorder {
	return m.recorder
}

// Recognize mocks base method.
func (m *MockOCRServiceServer) Recognize(arg0 context.Context, arg1 *OcrRequest) (*OcrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recognize", arg0, arg1)
	ret0, _ := ret[0].(*OcrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recognize indicates an expected call of Recognize.
func (mr *MockOCRServiceServerMockRecorder) Recognize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recognize", reflect.TypeOf((*MockOCRServiceServer)(nil).Recognize), arg0, arg1)
}

// Status mocks base method.
func (m *MockOCRServiceServer) Status(arg0 context.Context, arg1 *StatusRequest) (*OcrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*OcrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockOCRServiceServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockOCRServiceServer)(nil).Status), arg0, arg1)
}

// mustEmbedUnimplementedOCRServiceServer mocks base method.
func (m *MockOCRServiceServer) mustEmbedUnimplementedOCRServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOCRServiceServer")
}

// mustEmbedUnimplementedOCRServiceServer indicates an expected call of mustEmbedUnimplementedOCRServiceServer.
func (mr *MockOCRServiceServerMockRecorder) mustEmbedUnimplementedOCRServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOCRServiceServer", reflect.TypeOf((*MockOCRServiceServer)(nil).mustEmbedUnimplementedOCRServiceServer))
}

// MockUnsafeOCRServiceServer is a mock of UnsafeOCRServiceServer interface.
type MockUnsafeOCRServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOCRServiceServerMockRecorder
}

// MockUnsafeOCRServiceServerMockRecorder is the mock recorder for MockUnsafeOCRServiceServer.
type MockUnsafeOCRServiceServerMockRecorder struct {
	mock *MockUnsafeOCRServiceServer
}

// NewMockUnsafeOCRServiceServer creates a new mock instance.
func NewMockUnsafeOCRServiceServer(ctrl *gomock.Controller) *MockUnsafeOCRServiceServer {
	mock := &MockUnsafeOCRServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOCRServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOCRServiceServer) EXPECT() *MockUnsafeOCRServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOCRServiceServer mocks base method.
func (m *MockUnsafeOCRServiceServer) mustEmbedUnimplementedOCRServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOCRServiceServer")
}

// mustEmbedUnimplementedOCRServiceServer indicates an expected call of mustEmbedUnimplementedOCRServiceServer.
func (mr *MockUnsafeOCRServiceServerMockRecorder) mustEmbedUnimplementedOCRServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOCRServiceServer", reflect.TypeOf((*MockUnsafeOCRServiceServer)(nil).mustEmbedUnimplementedOCRServiceServer))
}
